// This #include statement was automatically added by the Particle IDE.
#include <Adafruit_DHT.h>

// This #include statement was automatically added by the Particle IDE.
#include <neopixel.h>

#define PIXEL_PIN D2
#define PIXEL_COUNT 3
#define PIXEL_TYPE WS2812B
#define DHTTYPE DHT22
#define DHTPIN D7

//NEOPIXEL --- type_of_variable variable
Adafruit_NeoPixel strip(PIXEL_COUNT, PIXEL_PIN, PIXEL_TYPE);

//TEMP SENSOR
DHT dht(DHTPIN, DHTTYPE);

//colours   variable with 3 integers (8bytes long)
uint32_t red = strip.Color(255, 0, 0);
uint32_t green = strip.Color(0, 255, 0);
uint32_t blue = strip.Color(0, 0, 255);
uint32_t purple = strip.Color(126, 0, 208);
uint32_t yellow = strip.Color(255, 215, 0);
uint32_t cyan = strip.Color(64, 224, 208);

// //LDR light reader
// int ldrPin = A0;
// int ldrReading = 0;
// int darkThreshold = 150;
// int brightThreshold = 800;

//ping sensor
int pingPin = D5;
int pingReading = 0;
int closeThreshold = 10;
int farThreshold = 40;

//timing
const long readingInterval = 10000;
unsigned long previousMillis = 0;

// servo
int servoPin = D0;
Servo wormServo;
int servoPos = 0;

void setup() 
{
    strip.begin();
    strip.show();
    
    //servo
    wormServo.attach(D0);
    wormServo.write(0);
    
    //sensor
    //Serial.begin(9600);
    
    //temp sensor
    Serial.begin(9600); 
	
    dht.begin();
}

void loop() 
{
    unsigned long currentMillis = millis();
    
    if(currentMillis - previousMillis > readingInterval)
    {
        previousMillis = currentMillis;
        
        //temp sensor
        float h = dht.getHumidity();
    	float t = dht.getTempCelcius();
    	
    	Serial.println(h);
    	Serial.println(t);
   
        //ping distance sensor
        long duration, cm;
        
        pinMode(pingPin, OUTPUT);
        digitalWrite(pingPin, LOW);
        delayMicroseconds(2);
        digitalWrite(pingPin, HIGH);
        delayMicroseconds(5);
        digitalWrite(pingPin, LOW);
        
        pinMode(pingPin, INPUT);
        duration = pulseIn(pingPin, HIGH);
    
        cm = microsecondsToCentimeters(duration);
        
        Serial.print(cm);
        Serial.print("cm");
        Serial.println();
    
        delay(100);
        
        if(cm < closeThreshold)
        {
            setStripColour(red);
            Particle.publish("it's close", String(pingReading));
                
            wormServo.write(0);
            delay(1000);  
        }
        else if(cm > farThreshold)
        {
            setStripColour(cyan);
            Particle.publish("it's far", String(pingReading));
                
            wormServo.write(180);
            delay(1000);
        }
        // else{
        //     setStripColour(purple);
        //     Particle.publish("all good", String(pingReading));   
                
        //     wormServo.write(0);
        // }
    }
    
    // //ldr reading  
    // unsigned long currentMillis = millis();
    
    // if(currentMillis - previousMillis > readingInterval)
    // {
    //     previousMillis = currentMillis;
        
    //     ldrReading = analogRead(ldrPin);
    //     // Particle.publish("ldr reading", String(ldrReading));
        
    //     if(ldrReading < darkThreshold)
    //     {
    //         setStripColour(cyan);
    //         Particle.publish("it's dark", String(ldrReading));
            
    //         wormServo.write(0);
    //         delay(1000);
    //     }
        
    //     else if(ldrReading > brightThreshold)
    //     {
    //         setStripColour(yellow);
    //         Particle.publish("it's bright", String(ldrReading));
            
    //         wormServo.write(180);
    //         delay(1000);
    //     }
        
    //     else
    //     {
    //         setStripColour(purple);
    //         Particle.publish("cool", String(ldrReading));   
            
    //         wormServo.write(0);
    //     }
    // }
}

void setStripColour(uint32_t colour)
{
    for (int i = 0; i < PIXEL_COUNT; i++)
    {
        strip.setPixelColor(i, colour);
    }
    strip.show();
}

long microsecondsToCentimeters(long microseconds) 
{
    return microseconds / 29 / 2;
}
